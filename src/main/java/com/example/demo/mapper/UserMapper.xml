<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.mapper.UserMapper">
    <resultMap id="user" type="com.example.demo.entity.User">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="password" column="password"/>
        <result property="adress" column="adress"/>
        <result property="status" column="status"/>
        <collection property="roleList" ofType="com.example.demo.entity.Role"
                    resultMap="role" columnPrefix="role_"
        />
    </resultMap>
    <resultMap id="role" type="com.example.demo.entity.Role">
        <id property="id" column="id"/>
        <result property="roleName" column="role_name"/>
        <collection property="permissonList" ofType="com.example.demo.entity.Permisson"
                    resultMap="permisson" columnPrefix="permission_"
        />
    </resultMap>
    <resultMap id="permisson" type="com.example.demo.entity.Permisson">
        <id property="id" column="id"/>
        <result property="typName" column="type_name"/>
        <result property="typePath" column="type_path"/>
        <result property="typePid" column="type_pid"/>
        <collection property="children"
                    column="id"
                    ofType="com.example.demo.entity.Permisson"
                    select="getChildren">
        </collection>
    </resultMap>
    <resultMap id="userAndRole" type="com.example.demo.entity.User">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="password" column="password"/>
        <result property="adress" column="adress"/>
        <result property="status" column="status"/>
        <collection property="roleList" ofType="com.example.demo.entity.Role"
                    resultMap="roleListNoPermisson"
        />
    </resultMap>
    <resultMap id="roleListNoPermisson" type="com.example.demo.entity.Role">
        <id property="id" column="rid"/>
        <result property="roleName" column="role_name"/>
    </resultMap>

    <sql id="role_Column_List">
        role.id as role_Id, role.role_name as role_role_name,
    </sql>

    <sql id="permisson_Column_List">
        permission.id as role_permission_id,
     permission.type_name as role_permission_type_name,
     permission.type_path as role_permission_type_path,
    permission.type_pid as role_permission_type_pid
    </sql>
    <select id="getUserInfo" resultMap="user">
        SELECT
        `user`.*,
        <include refid="role_Column_List"/>
        <include refid="permisson_Column_List"/>

        FROM
        `user`
        LEFT JOIN user_role ON `user`.id = user_role.user_id
        LEFT JOIN role ON user_role.role_id = role.id
        LEFT JOIN role_permisson ON role_permisson.role_id = role.id
        LEFT JOIN permission ON permission.id = role_permisson.permission_id
        WHERE
        user.id = #{user.id} AND permission.type_pid=0
    </select>

    <select id="getChildren" resultMap="permisson">
        select
        *
        from permission
        <if test="pid == null">
            where type_pid = 0
        </if>

        <if test="pid != null">
            where type_pid = #{pid}
        </if>
    </select>

    <select id="getUser" resultType="com.example.demo.entity.User">
        SELECT
        *
        FROM
        user
        WHERE 1=1
        <if test="name != null">
            and NAME = #{name}
        </if>
        <if test="password != null">
            AND PASSWORD = #{password}
        </if>
    </select>

    <select id="getUserByName" resultType="com.example.demo.entity.User">
        SELECT *
        FROM user
        WHERE NAME = #{name}
    </select>

    <select id="getUserPage" resultType="com.example.demo.entity.User">
        SELECT
        id,
        name,
        password,
        adress,
        status,
        sex
        FROM
        user
        WHERE
        1 =1 and id != 1
        <if test="name != null and  name!=''">
            and NAME = #{name}
        </if>
        order by ctime desc
        <if test="name == null or  name==''">
            limit #{start}, #{size}
        </if>

    </select>
    <select id="getTotal" resultType="integer">
        SELECT
        count(1)
        FROM
        user u
        LEFT JOIN user_role ur ON u.id = ur.user_id
        LEFT JOIN role r ON ur.role_id = r.id
        WHERE
        1 =1
        <if test="name != null and  name!=''">
            and NAME = #{name}
        </if>

    </select>
    <update id="changeStatuFlag">
        UPDATE user
        SET `status` = #{flag}
        WHERE id = #{id}
    </update>

    <select id="getUserInfoById" resultType="com.example.demo.entity.User">
        select name, password, adress, sex, id, status
        from user
        where id = #{id}
    </select>
    <select id="getUserRolePage" resultType="com.example.demo.vo.UserRoleVO">
        select t1.name as username,
        t3.role_name as roleName,
        t1.id as id
        from user t1
        left join user_role t2 on t1.id = t2.user_id
        left join role t3 on t2.role_id = t3.id
        where 1 = 1
        <if test="name != null and  name!=''">
            and t1.name = #{name}
        </if>
        <if test="name == null or name==''">
            limit #{start}, #{size}
        </if>
    </select>
    <select id="getUserRoleTotal" resultType="java.lang.Integer">
        select count(1)
        from user t1
        left join user_role t2 on t1.id = t2.user_id
        left join role t3 on t2.role_id = t3.id
        where 1 = 1
        <if test="name != null and name!=''">
            and t1.name = #{name}
        </if>
    </select>

    <delete id="delUser" parameterType="integer">
        delete
        from user
        where id = #{id}
    </delete>

    <update id="updateUserById" parameterType="com.example.demo.entity.User">
        update user
        <trim prefix="set" suffixOverrides=",">
            <if test="name != null and name != ''">
                name = #{name},
            </if>
            <if test="password != null and password != ''">
                password = #{password},
            </if>
            <if test="adress != null and adress != ''">
                adress = #{adress},
            </if>
            <if test="sex != null and sex != ''">
                sex = #{sex},
            </if>
        </trim>
        where id = #{id}
    </update>

    <insert id="addUser" useGeneratedKeys="true" keyProperty="id" parameterType="com.example.demo.entity.User">
        insert into user(name, password, adress, sex)
        values (#{name}, #{password}, #{adress}, #{sex})
    </insert>
</mapper>